#include <iostream>
using namespace std;

// Nodo para la lista doblemente enlazada
template <class T>
struct Node {
    T data;
    Node<T>* prev;
    Node<T>* next;
    
    Node(T newData) : data(newData), prev(nullptr), next(nullptr) {}
};

// Clase para la lista doblemente enlazada
template <class T>
class DoublyLinkedList {
private:
    Node<T>* head;
    Node<T>* tail;
    int size;
    
public:
    DoublyLinkedList() : head(nullptr), tail(nullptr), size(0) {}

    // Método para insertar un elemento al final de la lista
    void insert(T newData) {
        Node<T>* newNode = new Node<T>(newData);
        if (head == nullptr) {
            head = newNode;
        } else {
            tail->next = newNode;
            newNode->prev = tail;
        }
        tail = newNode;
        size++;
    }

    // Método para invertir la lista en su lugar
    void invert() {
        if (size <= 1) return;
        
        Node<T>* current = head;
        while (current != nullptr) {
            Node<T>* temp = current->next;
            current->next = current->prev;
            current->prev = temp;
            current = temp;
        }
        
        Node<T>* temp = head;
        head = tail;
        tail = temp;
    }

    // Método para ordenar la lista usando quicksort
    void sort() {
        // Implementación del algoritmo quicksort
        // (Se omite por brevedad)
    }

    // Método para obtener el producto de los elementos entre dos posiciones
    T getProductSublist(int start, int end) {
        if (start < 0 || start >= size || end < 0 || end >= size || start > end) {
            cerr << "Error: Posiciones inválidas" << endl;
            return T(); // Devuelve el valor predeterminado para el tipo T
        }
        
        T product = 1;
        Node<T>* current = head;
        int index = 0;
        while (current != nullptr && index <= end) {
            if (index >= start) {
                product *= current->data;
            }
            current = current->next;
            index++;
        }
        return product;
    }
    
    // Destructor para liberar la memoria
    ~DoublyLinkedList() {
        Node<T>* current = head;
        while (current != nullptr) {
            Node<T>* temp = current;
            current = current->next;
            delete temp;
        }
    }
};

int main() {
    // Ejemplo de uso
    DoublyLinkedList<int> myList;
    myList.insert(2);
    myList.insert(4);
    myList.insert(6);
    myList.insert(8);
    
    cout << "Lista original: ";
    Node<int>* current = myList.getHead();
    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }
    cout << endl;
    
    myList.invert();
    
    cout << "Lista invertida: ";
    current = myList.getHead();
    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }
    cout << endl;
    
    cout << "Producto del sublist: " << myList.getProductSublist(1, 3) << endl;
    
    return 0;
}
